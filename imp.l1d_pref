// https://pdfs.semanticscholar.org/74e6/b114822b712c100c7ffd1b01f4fb1564bd28.pdf

#include "cache.h"
#include "imp.h"
#include "math.h"

void L1_IPD_update(uint32_t cpu, uint64_t addr, int cache_hit, uint64_t ip, uint64_t data) {
	uint64_t curr_block = (addr >> LOG2_BLOCK_SIZE), i, j, k,
		base_addr = 0,
		match = 0,
		coefficient = 1;
	INDIRECT_PATTERN_DETECTOR *pattern = L1_IPD[cpu];

	if(cache_hit == 1){
		for(i=0; i<NUM_IPD_ENTRIES; i++)
			if(pattern[i].pid == ip) {								// entry found, which means idx1 is already there
				if(pattern[i].idx2 == 0 && pattern[i].idx1 != data) {				// if idx2 not found, write it
					pattern[i].idx2 = data;
					L1_PF_DEBUG(printf("Second index access\nip: %lx idx1: %lx idx2: %lx index: %lx\n",
						ip, pattern[i].idx1, pattern[i].idx2, data));
					break;
				}
				else if(pattern[i].idx2 != 0) {												// if idx2 present, this is third index access
					L1_PF_DEBUG(printf("Third index access\nip: %lx idx1: %lx idx2: %lx index: %lx\n",
						ip, pattern[i].idx1, pattern[i].idx2, data));
					pattern[i].pid = 0;								// so remove the IPD entry
					pattern[i].idx1 = 0;							
					pattern[i].idx2 = 0;
					for(j=0; j<NUM_COEFFICIENTS; j++)
						for(k=0; k<NUM_BASE_ADDR_TRACKED; k++)
							pattern[i].base_addr_arr[j][k] = 0;
					break;
				}
				else
					break;
			}
		if(i == NUM_IPD_ENTRIES)									// entry not found
			for(i=0; i<NUM_IPD_ENTRIES; i++)
				if(pattern[i].pid == 0) {							// search for free entry and assign new one
					pattern[i].pid = ip;
					pattern[i].idx1 = data;
					L1_PF_DEBUG(printf("First index access\nip: %lx idx1: %lx index: %lx\n",
						ip, pattern[i].idx1, data));
					break;
				}
		// if(i == NUM_IPD_ENTRIES)
		// L1_PF_DEBUG(printf("IPD full!!\n"));
	}
	else															// cache miss
		for(i=0; i<NUM_IPD_ENTRIES; i++)
			if(pattern[i].pid == ip) {								// find the index
				if(pattern[i].idx2 == 0) {							// if idx2 not found, this is a miss after first index access
					L1_PF_DEBUG(printf("Miss after first access\nip: %lx idx1: %lx miss_addr: %lx\n",
						ip, pattern[i].idx1, addr));
					for(j=0; j<NUM_COEFFICIENTS; j++){
						for(k=3; k>0; k--)						// Left shift the base_addr, since we are tracking only 4 base_addr
	    					pattern[i].base_addr_arr[j][k] = pattern[i].base_addr_arr[j][k-1];
	    				if(SHIFT_ARR[j] > 0){
	    					coefficient = pow(2,SHIFT_ARR[j]);
	    					pattern[i].base_addr_arr[j][0] = addr - ((pattern[i].idx1)*coefficient);
	    				}
	    				else{
	    					coefficient = pow(2,(-1*SHIFT_ARR[j]));
	    					pattern[i].base_addr_arr[j][0] = addr - ((pattern[i].idx1)/coefficient);
	    				}
	    				L1_PF_DEBUG(printf("calc_base_addr: %lx shift: %d coef: %lx\n",
						pattern[i].base_addr_arr[j][0], SHIFT_ARR[j], coefficient));
	    			}
				}
				else {			// index access after idx2 is found, so calculate base_addr and compare
					L1_PF_DEBUG(printf("Miss after second access\nip: %lx idx1: %lx idx2: %lx miss_addr: %lx\n",
						ip, pattern[i].idx1, pattern[i].idx2, addr));
					for(j=0; j<NUM_COEFFICIENTS; j++){
						if(SHIFT_ARR[j] > 0){
							coefficient = pow(2,SHIFT_ARR[j]);
							base_addr = addr - ((pattern[i].idx2)*coefficient);
						}
						else{
							coefficient = pow(2,(-1*SHIFT_ARR[j]));
							base_addr = addr - ((pattern[i].idx2)/coefficient);
						}
						L1_PF_DEBUG(printf("compare_base_addr: %lx\n",
						base_addr));
						for(k=0; k<NUM_BASE_ADDR_TRACKED; k++)
							if(pattern[i].base_addr_arr[j][k] == base_addr){	// if match found, update indirect table
								L1_PF_DEBUG(printf("Match found!!\n"));
								L1_IT_update(cpu, pattern[i].pid, pattern[i].idx2, base_addr, SHIFT_ARR[j]);
								match = 1;
								break;
							}
						if(match == 1)
							break;
					}
					if(match == 1){						// if match found, free the IPD entry
					pattern[i].pid = 0;
					pattern[i].idx1 = 0;
					pattern[i].idx2 = 0;
					for(j=0; j<NUM_COEFFICIENTS; j++)
						for(k=0; k<NUM_BASE_ADDR_TRACKED; k++)
							pattern[i].base_addr_arr[j][k] = 0;
					}
				}
			}
}

void L1_IT_update(uint32_t cpu, uint64_t pid, uint64_t index, uint64_t base_addr, uint64_t shift) {		// indirect table update
	PREFETCH_TABLE *pt = L1_PT[cpu];
	int match, i;

	for(match=0; match<NUM_PT_ENTRIES; match++) 						// find the streaming entry using PC 
		if(pt[match].pc == pid && pt[match].enable == 0) {				// once found update the indirect table
			pt[match].enable = 1;
			pt[match].index = index;
			pt[match].base_addr = base_addr;
			pt[match].shift = shift;
			pt[match].indirect_hit_cnt++;
			pt[match].exp_addr_found = 1;
			pt[match].ind_type = 1;										// set it as primary indice
			break;
		}

	for(i=0; i<NUM_PT_ENTRIES; i++)										// identify multi-way indirection
		if(pt[match].index == pt[i].index && pt[i].ind_type == 1 && match != i) {
			pt[match].ind_type = 2;
			pt[match].prev = i+1;
			pt[i].next_way = match+1;
			break;
		}

	for(i=0; i<NUM_PT_ENTRIES; i++)										// identify multi-level indirection
		if(pt[match].pc == pt[i].pc && pt[i].ind_type == 1 && match != i) {
			pt[match].ind_type = 3;
			pt[match].prev = i+1;
			pt[i].next_level = match+1;
			break;
		}
if(pt[match].ind_type == 1)												// once primary pattern identified, search for next level
	allocate_next_level(cpu, match);

	if (match == NUM_PT_ENTRIES){
		L1_PF_DEBUG(printf("IT update called!!\n"));
		for(match=0; match<NUM_PT_ENTRIES; match++)
			L1_PF_DEBUG(printf("IT ip: %lx\n", pt[match].pc));
        assert(0); // WE SHOULD NOT REACH HERE
	}
}

int L1_ST_update(uint32_t cpu, uint64_t ip, uint64_t addr) {								// stream table update
	PREFETCH_TABLE *pt = L1_PT[cpu];
	int match;

	for(match=0; match<NUM_PT_ENTRIES; match++)
		if(pt[match].pc == ip) {												// stream entry found using PC
			pt[match].addr = addr;												// update latest address
			pt[match].stream_hit_cnt++;
			// if(pt[match].stream_hit_cnt >= STREAM_THRESHOLD)
			break;
		}
	if(match == NUM_PT_ENTRIES)													// entry not found,
		for(match=0; match<NUM_PT_ENTRIES; match++)								// search for invalid entry
			if(pt[match].pc == 0) {
				pt[match].pc = ip;
				pt[match].addr = addr;
				pt[match].stream_hit_cnt++;
				break;
			}

	if (match == NUM_PT_ENTRIES) {												// invalid entry not found, search for lru victim
        for (match=0; match<NUM_PT_ENTRIES; match++) {
            if (pt[match].lru == (NUM_PT_ENTRIES-1))
                break;
        }
        pt[match].pc = ip;														// update stream table
		pt[match].addr = addr;
		pt[match].stream_hit_cnt++;
		pt[match].enable = 0;													// evict the corresponding indirect table entry
		pt[match].index = 0;
		pt[match].base_addr = 0;
		pt[match].shift = 0;
		pt[match].indirect_hit_cnt = 0;
		pt[match].ind_type = 0;
		pt[match].next_way = 0;
		pt[match].next_level = 0;
		pt[match].prev = 0;
    }

    if (match == NUM_PT_ENTRIES)
        assert(0); // WE SHOULD NOT REACH HERE

    int position = pt[match].lru;												// update lru
    for (int j=0; j<NUM_PT_ENTRIES; j++) {
        if (pt[j].lru < position)
            pt[j].lru++;
    }
    pt[match].lru = 0;
    return match;
}

void allocate_next_level(uint32_t cpu, int entry) {
	PREFETCH_TABLE *pt = L1_PT[cpu];
	int match; 
	for(match=0; match<NUM_PT_ENTRIES; match++)								// search for invalid entry
		if(pt[match].pc == 0) {
			pt[match].pc = pt[entry].pc;
			pt[match].addr = pt[entry].addr;
			pt[match].stream_hit_cnt = pt[entry].stream_hit_cnt;
			break;
		}

	if (match == NUM_PT_ENTRIES) {												// invalid entry not found, search for lru victim
        for (match=0; match<NUM_PT_ENTRIES; match++) {
            if (pt[match].lru == (NUM_PT_ENTRIES-1))
                break;
        }
        pt[match].pc = pt[entry].pc;														// update stream table
		pt[match].addr = pt[entry].addr;
		pt[match].stream_hit_cnt = pt[entry].stream_hit_cnt;
		pt[match].enable = 0;													// evict the corresponding indirect table entry
		pt[match].index = 0;
		pt[match].base_addr = 0;
		pt[match].shift = 0;
		pt[match].indirect_hit_cnt = 0;
		pt[match].ind_type = 0;
		pt[match].next_way = 0;
		pt[match].next_level = 0;
		pt[match].prev = 0;
    }

    if (match == NUM_PT_ENTRIES)
        assert(0); // WE SHOULD NOT REACH HERE

    int position = pt[match].lru;												// update lru
    for (int j=0; j<NUM_PT_ENTRIES; j++) {
        if (pt[j].lru < position)
            pt[j].lru++;
    }
    pt[match].lru = 0;
}

void CACHE::l1d_prefetcher_initialize() 
{
	cout << endl << "L1D Indirect Memory Prefetcher" << endl;
	for(int i=0; i<NUM_PT_ENTRIES; i++)
		L1_PT[cpu][i].lru = i;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
	PREFETCH_TABLE *pt = L1_PT[cpu];
	int pt_entry = 0, i, j, entry;
	uint64_t expected_addr,
			 pref_addr,
			 index;
	uint32_t set = get_set(addr);
	uint32_t way = get_way(addr, set);
	uint64_t data = block[set][way].data;							// get the data in the addr, this is for index B[i]

	pt_entry = L1_ST_update(cpu, ip, addr);							// update the stream table and get the entry
	if((pt[pt_entry].stream_hit_cnt)%5 == STREAM_THRESHOLD){			// if streaming threshold reached, prefetch stream
		L1_IPD_update(cpu, addr, cache_hit, ip, data);				// also update pattern detector, idx1 now filled
		pt[pt_entry].addr = addr;
		for(i=0; i<STREAM_PREFETCH_DEGREE; i++){
			pref_addr = ((pt[pt_entry].addr >> LOG2_BLOCK_SIZE) + i + 1) << LOG2_BLOCK_SIZE;
			prefetch_line(ip, addr, pref_addr, FILL_L1);			// prefetch next N cache lines
		}
	}
	if(pt[pt_entry].stream_hit_cnt > STREAM_THRESHOLD && pt[pt_entry].enable == 0)	// if streaming threshold crossed, update pattern detector
		L1_IPD_update(cpu, addr, cache_hit, ip, data);				// now idx2 will be filled or base_addr will be generated
																	// if it is a miss

	// this is to increase confidence in IMP and also to issue indirect prefetches
	for(i=0; i<NUM_PT_ENTRIES; i++)
		if(pt[i].pc == ip && pt[i].enable == 1 && pt[i].indirect_hit_cnt <= IMP_PREFETCH_THRESHOLD) {	
						// if it is stream access and indirect table entry is active
        L1_PF_DEBUG(printf("indirect prefetch enabled\n"));
        	if(pt[i].shift > 0)
				expected_addr = (pt[i].index << pt[i].shift) + pt[i].base_addr;		// calculate expected addr
			else
				expected_addr = (pt[i].index >> (-1*pt[i].shift)) + pt[i].base_addr;
			L1_PF_DEBUG(printf("expected_addr: %lx miss_addr: %lx shift: %lx\n", expected_addr, addr, pt[i].shift));
			if(addr == expected_addr){								// if expected addr found, inc hit count
				L1_PF_DEBUG(printf("hit cnt incremented\n"));
				pt[i].indirect_hit_cnt++;							
				pt[i].exp_addr_found = 1;
			}														// if not found it will be index access
			else {													
				if(pt[i].exp_addr_found == 0 && pt[i].indirect_hit_cnt > 0)						
					pt[i].indirect_hit_cnt--;						// if index accessed before match found, dec counter
				pt[i].index = data;									// update index
				pt[i].exp_addr_found = 0;
			}
			pt[i].addr = addr;
		}
			
		for(i=0; i<NUM_PT_ENTRIES; i++)
			if(pt[i].pc == ip && pt[i].indirect_hit_cnt > IMP_PREFETCH_THRESHOLD && cache_hit == 1 && pt[i].ind_type == 1) {	  
							//if IMP threshold crossed and if it is cache hit, it means index access - issue indirect prefetches
				L1_PF_DEBUG(printf("hit cnt: %lx\n", pt[i].indirect_hit_cnt));
				for(j=0; j<INDIRECT_PREFETCH_DEGREE; j++){
				set = get_set(addr + pt[i].pref_distance + j);			// calculate i + pref_distance
				way = get_way(addr + pt[i].pref_distance + j, set);
				index = block[set][way].data;						// get B[i+pref_distance]
				pref_addr = (index << pt[i].shift) + pt[i].base_addr;		// calc indirect address
				L1_PF_DEBUG(printf("indirect prefetch: addr: %lx pref_addr: %lx index: %lx\n",
						addr, pref_addr, index));
				prefetch_line(ip, addr, pref_addr, FILL_L1);				
			}
			if(pt[i].pref_distance < IMP_MAX_PREFETCH_DISTANCE)		// if pref_distance is less than maximum, increment
					pt[i].pref_distance += j;

			if(pt[i].next_way != 0){
				entry = pt[i].next_way-1;
				for(j=0; j<INDIRECT_PREFETCH_DEGREE; j++){
				set = get_set(addr + pt[entry].pref_distance + j);			// calculate i + pref_distance
				way = get_way(addr + pt[entry].pref_distance + j, set);
				index = block[set][way].data;						// get B[i+pref_distance]
				pref_addr = (index << pt[entry].shift) + pt[entry].base_addr;		// calc indirect address
				L1_PF_DEBUG(printf("indirect way prefetch: addr: %lx pref_addr: %lx index: %lx\n",
						addr, pref_addr, index));
				prefetch_line(ip, addr, pref_addr, FILL_L1);
			}
			if(pt[entry].pref_distance < IMP_MAX_PREFETCH_DISTANCE)		// if pref_distance is less than maximum, increment
					pt[entry].pref_distance += j;
			}

			if(pt[i].next_level != 0){
				entry = pt[i].next_level-1;
				for(j=0; j<INDIRECT_PREFETCH_DEGREE; j++){
				set = get_set(addr + pt[entry].pref_distance + j);		// calculate i + pref_distance
				way = get_way(addr + pt[entry].pref_distance + j, set);
				index = block[set][way].data;							
				index = (index << pt[i].shift) + pt[i].base_addr;		// this is B[i+pref_distance]
				set = get_set(index);
				way = get_way(index, set);
				index = block[set][way].data;
				pref_addr = (index << pt[entry].shift) + pt[entry].base_addr;		// this is A[B[i+pref_distance]]
				L1_PF_DEBUG(printf("indirect level prefetch: addr: %lx pref_addr: %lx index: %lx\n",
						addr, pref_addr, index));
				prefetch_line(ip, addr, pref_addr, FILL_L1);
			}
			if(pt[entry].pref_distance < IMP_MAX_PREFETCH_DISTANCE)		// if pref_distance is less than maximum, increment
					pt[entry].pref_distance += j;
			}
		}
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << endl << "L1D Indirect Memory Prefetcher final stats" << endl;
}
